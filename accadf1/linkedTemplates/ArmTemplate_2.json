{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "accadf1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OpenDataSetCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Opendatasetcopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binarycopy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binaryacc",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cdmCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyCDM",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "cdminput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "cdmOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/covidcpflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "covidinput",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCovid",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tSNo as string,\n\t\tObservationDate as string,\n\t\t{Province/State} as string,\n\t\t{Country/Region} as string,\n\t\t{Last Update} as string,\n\t\tConfirmed as float,\n\t\tDeaths as float,\n\t\tRecovered as float\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 select(mapColumn(\n\t\tSNo,\n\t\tObservationDate,\n\t\t{Province/State},\n\t\t{Country/Region},\n\t\t{Last Update},\n\t\tConfirmed,\n\t\tDeaths,\n\t\tRecovered\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tSNo as integer,\n\t\tObservationDate as timestamp,\n\t\tProvinceState as string,\n\t\tCountryRegion as string,\n\t\tLastUpdate as timestamp,\n\t\tConfirmed as decimal(18,2),\n\t\tDeaths as decimal(18,2),\n\t\tRecovered as decimal(18,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSNo,\n\t\tObservationDate,\n\t\tProvinceState = {Province/State},\n\t\tCountryRegion = {Country/Region},\n\t\tLastUpdate = {Last Update},\n\t\tConfirmed,\n\t\tDeaths,\n\t\tRecovered\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dependenciesmeta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dependmetainput",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dependmetaoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\tcollectionSource as string,\n\t\tcustom as (Endpoints as string[], {InUse[Yes/No]} as boolean, Name as string),\n\t\tmeta as (requires as (jsonparse as string, through as string), dev as boolean),\n\t\tname as string,\n\t\tsource as string,\n\t\tsourceType as string,\n\t\ttype as string,\n\t\tversion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 foldDown(unroll(custom.Endpoints),\n\tmapColumn(\n\t\tcollectionSource,\n\t\tEndpoints = custom.Endpoints,\n\t\t{InUse[Yes/No]} = custom.{InUse[Yes/No]},\n\t\tCustomName = custom.Name,\n\t\tmeta,\n\t\tname,\n\t\tsource,\n\t\tsourceType,\n\t\ttype,\n\t\tversion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(input(\n\t\tcollectionSource as string,\n\t\tcustom as (Endpoints as string[], {InUse[Yes/No]} as boolean, Name as string),\n\t\tmeta as (requires as (jsonparse as string, through as string), dev as boolean),\n\t\tname as string,\n\t\tsource as string,\n\t\tsourceType as string,\n\t\ttype as string,\n\t\tversion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['dependmetaoutput.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/devopsJsonDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adfinputjson",
								"type": "DatasetReference"
							},
							"name": "inputJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adfoutputJSON",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "dependenciescsv",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Dependencies"
						}
					],
					"script": "source(output(\n\t\tAirID as short,\n\t\tBuilderMeta as (DateTime as string, MetadataBuilder as (updated as date, version as string), VSTS as (Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as short, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), Build as (BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BINARIESDIRECTORY as string, BUILD_BUILDID as integer, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as short, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as boolean, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string, BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as short, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as boolean, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tComponentName as string,\n\t\tDataSource as string[],\n\t\tDependencies as (collectionSource as string, custom as (Endpoints as string[], {InUse[Yes/No]} as boolean, Name as string), meta as (AuditOverview as string, dev as boolean, patched_versions as string, recommendation as string, references as string, requires as ({@angular-devkit/architect} as string, {@angular-devkit/build-optimizer} as string, {@angular-devkit/build-webpack} as string, {@angular-devkit/core} as string, {@angular-devkit/schematics} as string, {@babel/code-frame} as string, {@babel/core} as string, {@babel/generator} as string, {@babel/helper-annotate-as-pure} as string, {@babel/helper-builder-binary-assignment-operator-visitor} as string, {@babel/helper-call-delegate} as string, {@babel/helper-create-regexp-features-plugin} as string, {@babel/helper-define-map} as string, {@babel/helper-explode-assignable-expression} as string, {@babel/helper-function-name} as string, {@babel/helper-get-function-arity} as string, {@babel/helper-hoist-variables} as string, {@babel/helper-member-expression-to-functions} as string, {@babel/helper-module-imports} as string, {@babel/helper-module-transforms} as string, {@babel/helper-optimise-call-expression} as string, {@babel/helper-plugin-utils} as string, {@babel/helper-regex} as string, {@babel/helper-remap-async-to-generator} as string, {@babel/helper-replace-supers} as string, {@babel/helper-simple-access} as string, {@babel/helper-split-export-declaration} as string, {@babel/helper-wrap-function} as string, {@babel/helpers} as string, {@babel/highlight} as string, {@babel/parser} as string, {@babel/plugin-proposal-async-generator-functions} as string, {@babel/plugin-proposal-dynamic-import} as string, {@babel/plugin-proposal-json-strings} as string, {@babel/plugin-proposal-object-rest-spread} as string, {@babel/plugin-proposal-optional-catch-binding} as string, {@babel/plugin-proposal-unicode-property-regex} as string, {@babel/plugin-syntax-async-generators} as string, {@babel/plugin-syntax-dynamic-import} as string, {@babel/plugin-syntax-json-strings} as string, {@babel/plugin-syntax-object-rest-spread} as string, {@babel/plugin-syntax-optional-catch-binding} as string, {@babel/plugin-transform-arrow-functions} as string, {@babel/plugin-transform-async-to-generator} as string, {@babel/plugin-transform-block-scoped-functions} as string, {@babel/plugin-transform-block-scoping} as string, {@babel/plugin-transform-classes} as string, {@babel/plugin-transform-computed-properties} as string, {@babel/plugin-transform-destructuring} as string, {@babel/plugin-transform-dotall-regex} as string, {@babel/plugin-transform-duplicate-keys} as string, {@babel/plugin-transform-exponentiation-operator} as string, {@babel/plugin-transform-for-of} as string, {@babel/plugin-transform-function-name} as string, {@babel/plugin-transform-literals} as string, {@babel/plugin-transform-member-expression-literals} as string, {@babel/plugin-transform-modules-amd} as string, {@babel/plugin-transform-modules-commonjs} as string, {@babel/plugin-transform-modules-systemjs} as string, {@babel/plugin-transform-modules-umd} as string, {@babel/plugin-transform-named-capturing-groups-regex} as string, {@babel/plugin-transform-new-target} as string, {@babel/plugin-transform-object-super} as string, {@babel/plugin-transform-parameters} as string, {@babel/plugin-transform-property-literals} as string, {@babel/plugin-transform-regenerator} as string, {@babel/plugin-transform-reserved-words} as string, {@babel/plugin-transform-shorthand-properties} as string, {@babel/plugin-transform-spread} as string, {@babel/plugin-transform-sticky-regex} as string, {@babel/plugin-transform-template-literals} as string, {@babel/plugin-transform-typeof-symbol} as string, {@babel/plugin-transform-unicode-regex} as string, {@babel/preset-env} as string, {@babel/template} as string, {@babel/traverse} as string, {@babel/types} as string, {@ngtools/webpack} as string, {@schematics/angular} as string, {@schematics/update} as string, {@types/core-js} as string, {@types/events} as string, {@types/glob} as string, {@types/jasmine} as string, {@types/minimatch} as string, {@types/mkdirp} as string, {@types/node} as string, {@types/q} as string, {@types/selenium-webdriver} as string, {@types/source-list-map} as string, {@types/webpack-sources} as string, {@webassemblyjs/ast} as string, {@webassemblyjs/floating-point-hex-parser} as string, {@webassemblyjs/helper-api-error} as string, {@webassemblyjs/helper-buffer} as string, {@webassemblyjs/helper-code-frame} as string, {@webassemblyjs/helper-fsm} as string, {@webassemblyjs/helper-module-context} as string, {@webassemblyjs/helper-wasm-bytecode} as string, {@webassemblyjs/helper-wasm-section} as string, {@webassemblyjs/ieee754} as string, {@webassemblyjs/leb128} as string, {@webassemblyjs/utf8} as string, {@webassemblyjs/wasm-edit} as string, {@webassemblyjs/wasm-gen} as string, {@webassemblyjs/wasm-opt} as string, {@webassemblyjs/wasm-parser} as string, {@webassemblyjs/wast-parser} as string, {@webassemblyjs/wast-printer} as string, {@xtuc/ieee754} as string, {@xtuc/long} as string, {@yarnpkg/lockfile} as string, JSONStream as string, abab as string, abbrev as boolean, accepts as string, acorn as string, {acorn-dynamic-import} as string, {acorn-globals} as string, {acorn-jsx} as string, {adm-zip} as string, after as string, {agent-base} as string, agentkeepalive as string, ajv as string, {ajv-errors} as string, {ajv-keywords} as string, {align-text} as string, amdefine as string, {ansi-colors} as string, {ansi-escapes} as string, {ansi-html} as string, {ansi-regex} as string, {ansi-styles} as string, anymatch as string, {app-root-path} as string, {append-transform} as string, aproba as string, archiver as string, {archiver-utils} as string, {are-we-there-yet} as string, argparse as string, {aria-query} as string, {arr-diff} as string, {arr-flatten} as string, {arr-union} as string, {array-equal} as string, {array-find-index} as string, {array-flatten} as string, {array-slice} as string, {array-union} as string, {array-uniq} as string, {array-unique} as string, {arraybuffer.slice} as string, arrify as string, asap as string, asn1 as string, {asn1.js} as string, assert as string, {assert-plus} as string, {assertion-error} as string, {assign-symbols} as string, {ast-types-flow} as string, async as string, {async-each} as string, {async-foreach} as string, {async-limiter} as string, asynckit as string, atob as string, autoprefixer as string, {aws-sdk} as string, {aws-sign2} as string, aws4 as string, {axobject-query} as string, {babel-code-frame} as string, {babel-generator} as string, {babel-helper-call-delegate} as string, {babel-helper-define-map} as string, {babel-helper-function-name} as string, {babel-helper-get-function-arity} as string, {babel-helper-hoist-variables} as string, {babel-helper-optimise-call-expression} as string, {babel-helper-regex} as string, {babel-helper-replace-supers} as string, {babel-helpers} as string, {babel-messages} as string, {babel-plugin-dynamic-import-node} as string, {babel-plugin-syntax-object-rest-spread} as string, {babel-plugin-transform-es2015-modules-amd} as string, {babel-plugin-transform-es2015-modules-commonjs} as string, {babel-plugin-transform-flow-strip-types} as string, {babel-plugin-transform-strict-mode} as string, {babel-register} as string, {babel-runtime} as string, {babel-template} as string, {babel-traverse} as string, {babel-types} as string, babylon as string, backo2 as string, {balanced-match} as string, base as string, {base64-arraybuffer} as string, {base64-js} as string, base64id as string, batch as string, {bcrypt-pbkdf} as string, {better-assert} as string, {big.js} as string, {binary-extensions} as string, bl as string, blob as string, {block-stream} as string, {blocking-proxy} as string, bluebird as string, {bn.js} as string, {body-parser} as string, bonjour as string, boom as string, {brace-expansion} as string, braces as string, brorand as string, {browser-fingerprint} as string, {browserify-aes} as string, {browserify-cipher} as string, {browserify-des} as string, {browserify-rsa} as string, {browserify-sign} as string, {browserify-zlib} as string, browserslist as string, buffer as string, {buffer-alloc} as string, {buffer-alloc-unsafe} as string, {buffer-crc32} as string, {buffer-fill} as string, {buffer-from} as string, {buffer-indexof} as string, {buffer-xor} as string, {builtin-modules} as string, {builtin-status-codes} as string, builtins as string, bytes as string, cacache as string, {cache-base} as string, {callback-stream} as string, {caller-callsite} as string, {caller-path} as string, callsite as string, callsites as string, camelcase as string, {camelcase-keys} as string, {caniuse-lite} as string, {canonical-path} as string, canvg as string, caseless as string, {center-align} as string, chalk as string, chardet as string, {check-error} as string, chokidar as string, chownr as string, {chrome-launcher} as string, {chrome-remote-interface} as string, {chrome-trace-event} as string, {cipher-base} as string, {circular-dependency-plugin} as string, {circular-json} as string, {class-utils} as string, {clean-css} as string, {cli-cursor} as string, {cli-width} as string, cliui as string, clone as string, {clone-deep} as string, co as string, {code-point-at} as string, {collection-visit} as string, {color-convert} as string, {color-name} as string, colors as string, {combine-lists} as string, {combined-stream} as string, commander as string, commist as string, commondir as string, {component-bind} as string, {component-emitter} as string, {component-inherit} as string, {compress-commons} as string, compressible as string, compression as string, {concat-map} as string, {concat-stream} as string, connect as string, {connect-history-api-fallback} as string, {console-browserify} as string, {console-control-strings} as string, {constants-browserify} as string, {content-disposition} as string, {content-type} as string, {convert-source-map} as string, cookie as string, {cookie-signature} as string, {copy-concurrently} as string, {copy-descriptor} as string, {copy-webpack-plugin} as string, {core-js} as string, {core-js-compat} as string, {core-util-is} as string, cors as string, cosmiconfig as string, crc as string, {crc32-stream} as string, {create-ecdh} as string, {create-hash} as string, {create-hmac} as string, {cross-spawn} as string, cryptiles as string, {crypto-browserify} as string, {css-line-break} as string, {css-parse} as string, {css-selector-tokenizer} as string, cssauron as string, cssesc as string, cssom as string, cssstyle as string, cuid as string, {currently-unhandled} as string, {custom-event} as string, cyclist as string, d as string, {damerau-levenshtein} as string, dashdash as string, {date-now} as string, debug as string, debuglog as string, decamelize as string, {decode-uri-component} as string, {decompress-response} as string, {deep-eql} as string, {deep-equal} as string, {deep-extend} as string, {deep-is} as string, {default-gateway} as string, {default-require-extensions} as string, {define-properties} as string, {define-property} as string, del as string, {delayed-stream} as string, delegates as string, depd as string, {dependency-graph} as string, {des.js} as string, destroy as string, {detect-indent} as string, {detect-libc} as string, {detect-node} as string, dezalgo as string, di as string, diff as string, {diffie-hellman} as string, {dir-glob} as string, {dns-equal} as string, {dns-packet} as string, {dns-txt} as string, doctrine as string, {dom-serialize} as string, {domain-browser} as string, duplexer3 as string, duplexify as string, {ecc-jsbn} as string, {edge-launcher} as string, {ee-first} as string, {electron-to-chromium} as string, elliptic as string, {emoji-regex} as string, {emojis-list} as string, encodeurl as string, encoding as string, {end-of-stream} as string, {engine.io} as string, {engine.io-client} as string, {engine.io-parser} as string, {enhanced-resolve} as string, ent as string, {err-code} as string, errno as string, {error-ex} as string, {es-abstract} as string, {es-to-primitive} as string, {es5-ext} as string, {es6-iterator} as string, {es6-map} as string, {es6-promise} as string, {es6-promisify} as string, {es6-set} as string, {es6-symbol} as string, {es6-weak-map} as string, {escape-html} as string, {escape-string-regexp} as string, escodegen as string, escope as string, {eslint-scope} as string, espree as string, esprima as string, esquery as string, esrecurse as string, estraverse as string, esutils as string, etag as string, {event-emitter} as string, eventemitter3 as string, events as string, eventsource as string, evp_bytestokey as string, execa as string, exit as string, {expand-braces} as string, {expand-brackets} as string, {expand-range} as string, express as string, extend as string, {extend-shallow} as string, {external-editor} as string, extglob as string, extsprintf as string, {fast-deep-equal} as string, {fast-diff} as string, {fast-json-stable-stringify} as string, {fast-levenshtein} as string, fastparse as string, {faye-websocket} as string, {figgy-pudding} as string, figures as string, {file-entry-cache} as string, {file-loader} as string, {file-saver} as string, {filename-regex} as string, {filename-reserved-regex} as string, filenamify as string, fileset as string, {fill-range} as string, finalhandler as string, {find-cache-dir} as string, {find-up} as string, {flat-cache} as string, {flush-write-stream} as string, {follow-redirects} as string, {for-in} as string, {for-own} as string, {forever-agent} as string, {form-data} as string, forwarded as string, {fragment-cache} as string, fresh as string, from2 as string, {fs-access} as string, {fs-minipass} as string, {fs-write-stream-atomic} as string, {fs.realpath} as string, fsevents as string, fstream as string, {function-bind} as string, gauge as string, gaze as string, {generate-function} as string, {generate-object-property} as string, genfun as string, {get-caller-file} as string, {get-func-name} as string, {get-stdin} as string, {get-stream} as string, {get-value} as string, getpass as string, glob as string, {glob-base} as string, {glob-parent} as string, {glob-stream} as string, globals as string, globby as string, globule as string, got as string, {graceful-fs} as string, {graceful-readlink} as string, {handle-thing} as string, handlebars as string, {har-schema} as string, {har-validator} as string, has as string, {has-ansi} as string, {has-binary} as string, {has-cors} as string, {has-flag} as string, {has-symbol-support-x} as string, {has-symbols} as string, {has-to-string-tag-x} as string, {has-unicode} as string, {has-value} as string, {has-values} as string, {hash-base} as string, {hash.js} as string, hawk as string, {help-me} as string, {hmac-drbg} as string, hoek as string, {homedir-polyfill} as string, {hosted-git-info} as string, {hpack.js} as string, {html-entities} as string, html2canvas as string, {http-cache-semantics} as string, {http-deceiver} as string, {http-errors} as string, {http-parser-js} as string, {http-proxy} as string, {http-proxy-agent} as string, {http-proxy-middleware} as string, {http-signature} as string, {https-browserify} as string, {https-proxy-agent} as string, {humanize-ms} as string, {humanize-url} as string, {iconv-lite} as string, ieee754 as string, iferr as string, ignore as string, {ignore-walk} as string, {image-size} as string, {import-cwd} as string, {import-fresh} as string, {import-from} as string, {import-local} as string, imurmurhash as string, {in-publish} as string, {indent-string} as string, indexof as string, {infer-owner} as string, inflight as string, inherits as string, ini as string, inquirer as string, {internal-ip} as string, interpret as string, invariant as string, {invert-kv} as string, ip as string, {ip-regex} as string, {ipaddr.js} as string, {is-absolute} as string, {is-absolute-url} as string, {is-accessor-descriptor} as string, {is-arguments} as string, {is-arrayish} as string, {is-binary-path} as string, {is-buffer} as string, {is-builtin-module} as string, {is-callable} as string, {is-data-descriptor} as string, {is-date-object} as string, {is-descriptor} as string, {is-directory} as string, {is-dotfile} as string, {is-equal-shallow} as string, {is-extendable} as string, {is-extglob} as string, {is-finite} as string, {is-fullwidth-code-point} as string, {is-glob} as string, {is-my-ip-valid} as string, {is-my-json-valid} as string, {is-negated-glob} as string, {is-number} as string, {is-object} as string, {is-odd} as string, {is-path-cwd} as string, {is-path-in-cwd} as string, {is-path-inside} as string, {is-plain-obj} as string, {is-plain-object} as string, {is-posix-bracket} as string, {is-primitive} as string, {is-promise} as string, {is-property} as string, {is-regex} as string, {is-relative} as string, {is-resolvable} as string, {is-retry-allowed} as string, {is-stream} as string, {is-symbol} as string, {is-typedarray} as string, {is-unc-path} as string, {is-utf8} as string, {is-windows} as string, {is-wsl} as string, isarray as string, isbinaryfile as string, isexe as string, isobject as string, isstream as string, {istanbul-api} as string, {istanbul-instrumenter-loader} as string, {istanbul-lib-coverage} as string, {istanbul-lib-hook} as string, {istanbul-lib-instrument} as string, {istanbul-lib-report} as string, {istanbul-lib-source-maps} as string, {istanbul-reports} as string, isurl as string, jasmine as string, {jasmine-core} as string, jasminewd2 as string, {jest-docblock} as string, {jest-worker} as string, jmespath as string, {js-base64} as string, {js-levenshtein} as string, {js-tokens} as string, {js-yaml} as string, jsbn as string, jsdom as string, jsesc as string, {json-loader} as string, {json-parse-better-errors} as string, {json-schema} as string, {json-schema-traverse} as string, {json-stable-stringify} as string, {json-stringify-safe} as string, json3 as string, json5 as string, jsonify as string, jsonparse as string, jsonpointer as string, jsprim as string, {karma-jasmine} as string, {karma-source-map-support} as string, killable as string, {kind-of} as string, {lazy-cache} as string, lazystream as string, lcid as string, less as string, {less-loader} as string, leven as string, levn as string, {license-webpack-plugin} as string, {lighthouse-logger} as string, {load-json-file} as string, {loader-runner} as string, {loader-utils} as string, {locate-path} as string, lodash as string, {lodash._baseassign} as string, {lodash._basecopy} as string, {lodash._basecreate} as string, {lodash._getnative} as string, {lodash._isiterateecall} as string, {lodash.clonedeep} as string, {lodash.isarguments} as string, {lodash.isarray} as string, {lodash.keys} as string, log4js as string, loglevel as string, longest as string, {loose-envify} as string, {loud-rejection} as string, {lowercase-keys} as string, {lru-cache} as string, {magic-string} as string, {make-dir} as string, {make-error} as string, {make-fetch-happen} as string, mamacro as string, {map-age-cleaner} as string, {map-cache} as string, {map-obj} as string, {map-visit} as string, {math-random} as string, {md5.js} as string, {media-typer} as string, mem as string, {memory-fs} as string, meow as string, {merge-descriptors} as string, {merge-stream} as string, methods as string, micromatch as string, {miller-rabin} as string, mime as string, {mime-db} as string, {mime-types} as string, {mimic-fn} as string, {mimic-response} as string, {mini-css-extract-plugin} as string, {minimalistic-assert} as string, {minimalistic-crypto-utils} as string, minimatch as string, minimist as string, minipass as string, minizlib as string, mississippi as string, {mixin-deep} as string, mkdirp as string, {move-concurrently} as string, mqtt as string, {mqtt-packet} as string, ms as string, {multicast-dns} as string, {multicast-dns-service-types} as string, {mute-stream} as string, nan as string, nanomatch as string, {natural-compare} as string, needle as string, negotiator as string, {neo-async} as string, {next-tick} as string, {nice-try} as string, {node-fetch-npm} as string, {node-fingerprint} as string, {node-forge} as string, {node-gyp} as string, {node-libs-browser} as string, {node-pre-gyp} as string, {node-releases} as string, nopt as string, {normalize-package-data} as string, {normalize-path} as string, {normalize-range} as string, {normalize-url} as string, {npm-bundled} as string, {npm-package-arg} as string, {npm-packlist} as string, {npm-pick-manifest} as string, {npm-registry-fetch} as string, {npm-run-path} as string, npmlog as string, {null-check} as string, num2fraction as string, {number-is-nan} as string, nwmatcher as string, {oauth-sign} as string, {object-assign} as string, {object-component} as string, {object-copy} as string, {object-inspect} as string, {object-is} as string, {object-keys} as string, {object-visit} as string, {object.assign} as string, {object.getownpropertydescriptors} as string, {object.omit} as string, {object.pick} as string, obuf as string, omggif as string, {on-finished} as string, {on-headers} as string, once as string, onetime as string, open as string, opn as string, optimist as string, optionator as string, options as string, original as string, {os-browserify} as string, {os-homedir} as string, {os-locale} as string, {os-tmpdir} as string, osenv as string, {p-cancelable} as string, {p-defer} as string, {p-finally} as string, {p-is-promise} as string, {p-limit} as string, {p-locate} as string, {p-map} as string, {p-retry} as string, {p-timeout} as string, {p-try} as string, pacote as string, pako as string, {parallel-transform} as string, parchment as string, {parse-asn1} as string, {parse-glob} as string, {parse-json} as string, {parse-passwd} as string, parse5 as string, parsejson as string, parseqs as string, parseuri as string, parseurl as string, pascalcase as string, {path-browserify} as string, {path-dirname} as string, {path-exists} as string, {path-is-absolute} as string, {path-is-inside} as string, {path-key} as string, {path-parse} as string, {path-to-regexp} as string, {path-type} as string, pathval as string, pbkdf2 as string, {performance-now} as string, picomatch as string, pify as string, pinkie as string, {pinkie-promise} as string, {pkg-dir} as string, pluralize as string, portfinder as string, {posix-character-classes} as string, postcss as string, {postcss-import} as string, {postcss-load-config} as string, {postcss-loader} as string, {postcss-value-parser} as string, {prelude-ls} as string, {prepend-http} as string, preserve as string, private as string, process as string, {process-nextick-args} as string, progress as string, promise as string, {promise-inflight} as string, {promise-polyfill} as string, {promise-retry} as string, protoduck as string, {proxy-addr} as string, prr as string, pseudomap as string, psl as string, {public-encrypt} as string, pump as string, pumpify as string, punycode as string, q as string, qjobs as string, qs as string, {query-string} as string, querystring as string, {querystring-es3} as string, querystringify as string, {quill-delta} as string, randomatic as string, randombytes as string, randomfill as string, {range-parser} as string, {raw-body} as string, {raw-loader} as string, rc as string, {read-cache} as string, {read-package-json} as string, {read-package-tree} as string, {read-pkg} as string, {read-pkg-up} as string, {readable-stream} as string, {readdir-scoped-modules} as string, readdirp as string, redent as string, {reflect-metadata} as string, regenerate as string, {regenerate-unicode-properties} as string, {regenerator-runtime} as string, {regenerator-transform} as string, {regex-cache} as string, {regex-not} as string, {regexp.prototype.flags} as string, {regexpu-core} as string, regjsgen as string, regjsparser as string, reinterval as string, {remove-trailing-separator} as string, {repeat-element} as string, {repeat-string} as string, repeating as string, request as string, {require-directory} as string, {require-main-filename} as string, {require-uncached} as string, {requires-port} as string, resolve as string, {resolve-cwd} as string, {resolve-from} as string, {resolve-url} as string, {restore-cursor} as string, ret as string, retry as string, rgbcolor as string, {right-align} as string, rimraf as string, ripemd160 as string, {run-async} as string, {run-queue} as string, {rx-lite} as string, {rx-lite-aggregates} as string, rxjs as string, {safe-buffer} as string, {safe-regex} as string, {safer-buffer} as string, sass as string, {sass-graph} as string, {sass-loader} as string, saucelabs as string, sax as string, {schema-utils} as string, {scss-tokenizer} as string, {select-hose} as string, {selenium-webdriver} as string, selfsigned as string, semver as string, {semver-dsl} as string, {semver-intersect} as string, send as string, {serialize-javascript} as string, {serve-index} as string, {serve-static} as string, {set-blocking} as string, {set-immediate-shim} as string, {set-value} as string, setimmediate as string, setprototypeof as string, {sha.js} as string, {shallow-clone} as string, {shebang-command} as string, {shebang-regex} as string, {signal-exit} as string, slash as string, {slice-ansi} as string, {smart-buffer} as string, snapdragon as string, {snapdragon-node} as string, {snapdragon-util} as string, sntp as string, {socket.io} as string, {socket.io-adapter} as string, {socket.io-client} as string, {socket.io-parser} as string, sockjs as string, {sockjs-client} as string, socks as string, {socks-proxy-agent} as string, {sort-keys} as string, {source-list-map} as string, {source-map} as string, {source-map-loader} as string, {source-map-resolve} as string, {source-map-support} as string, {source-map-url} as string, {sourcemap-codec} as string, {spdx-correct} as string, {spdx-exceptions} as string, {spdx-expression-parse} as string, {spdx-license-ids} as string, spdy as string, {spdy-transport} as string, {speed-measure-webpack-plugin} as string, {split-string} as string, split2 as string, {sprintf-js} as string, sshpk as string, ssri as string, {stackblur-canvas} as string, {static-extend} as string, statuses as string, {stdout-stream} as string, {stream-browserify} as string, {stream-each} as string, {stream-http} as string, {stream-shift} as string, {strict-uri-encode} as string, {string-width} as string, {string.prototype.trimleft} as string, {string.prototype.trimright} as string, string_decoder as string, stringstream as string, {strip-ansi} as string, {strip-bom} as string, {strip-eof} as string, {strip-indent} as string, {strip-json-comments} as string, {strip-outer} as string, {strip-url-auth} as string, {style-loader} as string, stylus as string, {stylus-loader} as string, {supports-color} as string, {symbol-observable} as string, {symbol-tree} as string, table as string, tapable as string, tar as string, {tar-stream} as string, terser as string, {terser-webpack-plugin} as string, {text-table} as string, through as string, through2 as string, {through2-filter} as string, thunky as string, {timed-out} as string, {timers-browserify} as string, tmp as string, {to-array} as string, {to-arraybuffer} as string, {to-fast-properties} as string, {to-object-path} as string, {to-regex} as string, {to-regex-range} as string, toidentifier as string, {tough-cookie} as string, tr46 as string, {tree-kill} as string, {trim-newlines} as string, {trim-repeated} as string, {trim-right} as string, {true-case-path} as string, tsconfig as string, tslib as string, tsutils as string, {tty-browserify} as string, {tunnel-agent} as string, tweetnacl as string, {type-check} as string, {type-detect} as string, {type-fest} as string, {type-is} as string, typedarray as string, typescript as string, {uglify-es} as string, {uglify-js} as string, {uglify-to-browserify} as string, {uglifyjs-webpack-plugin} as string, ultron as string, {unc-path-regex} as string, {underscore.string} as string, {unicode-canonical-property-names-ecmascript} as string, {unicode-match-property-ecmascript} as string, {unicode-match-property-value-ecmascript} as string, {unicode-property-aliases-ecmascript} as string, {union-value} as string, {unique-filename} as string, {unique-slug} as string, {universal-analytics} as string, unpipe as string, {unset-value} as string, upath as string, {uri-js} as string, urix as string, url as string, {url-parse} as string, {url-parse-lax} as string, {url-to-options} as string, use as string, {user-home} as string, useragent as string, util as string, {util-deprecate} as string, {util-promisify} as string, {util.promisify} as string, {utils-merge} as string, uuid as string, v8flags as string, {validate-npm-package-license} as string, {validate-npm-package-name} as string, vargs as string, vary as string, verror as string, {vm-browserify} as string, {void-elements} as string, walkdir as string, watchpack as string, wbuf as string, {webdriver-js-extender} as string, {webdriver-manager} as string, {webidl-conversions} as string, webpack as string, {webpack-core} as string, {webpack-dev-middleware} as string, {webpack-dev-server} as string, {webpack-log} as string, {webpack-merge} as string, {webpack-sources} as string, {webpack-subresource-integrity} as string, {websocket-driver} as string, {websocket-extensions} as string, {websocket-stream} as string, {whatwg-url} as string, when as string, which as string, {which-module} as string, {wide-align} as string, {window-size} as string, {word-wrap} as string, wordwrap as string, {worker-farm} as string, {worker-plugin} as string, {wrap-ansi} as string, wrappy as boolean, write as string, ws as string, {wtf-8} as string, {xml-name-validator} as string, xml2js as string, xmlbuilder as string, xmldom as string, {xmlhttprequest-ssl} as string, xtend as string, y18n as string, yallist as string, yargs as string, {yargs-parser} as string, yeast as string, yn as string, {zip-stream} as string, zrender as string), severity as string), name as string, source as string, sourceType as string, type as string, version as string)[],\n\t\tEndpoints as string[],\n\t\tEnvironment as string[],\n\t\tErrors as (CRITICAL as (Message as string, Source as string, Time as timestamp)[], ERROR as string[], WARNING as (Message as string, Source as string, Time as timestamp)[]),\n\t\tEso as string[],\n\t\tFilteredData as string[],\n\t\tMRDR as string[],\n\t\tPlatform as string,\n\t\tServices as (InUse as boolean, Name as string, Version as string, collectionSource as string)[],\n\t\tTemplates as (InUse as boolean, Name as string, Version as string, collectionSource as string)[],\n\t\tUnsupportedFiles as string[],\n\t\tVersion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> inputJSON\ninputJSON foldDown(unroll(Dependencies, Dependencies),\n\tmapColumn(\n\t\tcollectionSource = Dependencies.collectionSource,\n\t\tname = Dependencies.name,\n\t\tsource = Dependencies.source,\n\t\tsourceType = Dependencies.sourceType,\n\t\ttype = Dependencies.type,\n\t\tversion = Dependencies.version,\n\t\tAirID,\n\t\tComponentName,\n\t\tDateTime = BuilderMeta.DateTime,\n\t\tAGENT_NAME = BuilderMeta.VSTS.Agent.AGENT_NAME,\n\t\tSYSTEM_TEAMPROJECT = BuilderMeta.VSTS.System.SYSTEM_TEAMPROJECT,\n\t\tmetadev = Dependencies.meta.dev,\n\t\tBUILD_REPOSITORY_URI = BuilderMeta.VSTS.Build.BUILD_REPOSITORY_URI,\n\t\tAGENT_MACHINENAME = BuilderMeta.VSTS.Agent.AGENT_MACHINENAME,\n\t\tAGENT_OS = BuilderMeta.VSTS.Agent.AGENT_OS,\n\t\tAGENT_OSARCHITECTURE = BuilderMeta.VSTS.Agent.AGENT_OSARCHITECTURE\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Dependencies\nDependencies sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['outputdependencies.json'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nDependencies sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopsdependencies.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/devopsenv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adfinputjson",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "adfinputjson",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "adfinputjson",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "adfinputjson",
								"type": "DatasetReference"
							},
							"name": "source4"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dependmetaoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "adfoutputJSON",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "adfoutputJSON",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "adfoutputJSON",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "Services"
						},
						{
							"name": "Template"
						},
						{
							"name": "ErrorCritical"
						},
						{
							"name": "ErrorsWarning"
						}
					],
					"script": "source(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source1\nsource(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source2\nsource(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source3\nsource(output(\n\t\tAirID as string,\n\t\tComponentName as string,\n\t\tVersion as string,\n\t\tEnvironment as string[],\n\t\tEndpoints as string[],\n\t\tPlatform as string,\n\t\tDependencies as (name as string, version as string, type as string, sourceType as string, source as string, collectionSource as string, meta as ({} as string), custom as (Name as string, Endpoints as string[], {InUse[Yes/No]} as boolean))[],\n\t\tBuilderMeta as (MetadataBuilder as (version as string, updated as string), DateTime as string, VSTS as (Build as (BUILD_REPOSITORY_URI as string, BUILD_SOURCEBRANCHNAME as string, BUILD_ARTIFACTSTAGINGDIRECTORY as string, BUILD_BUILDID as string, BUILD_BUILDNUMBER as string, BUILD_BUILDURI as string, BUILD_BINARIESDIRECTORY as string, BUILD_DEFINITIONNAME as string, BUILD_DEFINITIONVERSION as string, BUILD_REASON as string, BUILD_REPOSITORY_CLEAN as string, BUILD_REPOSITORY_LOCALPATH as string, BUILD_REPOSITORY_ID as string, BUILD_REPOSITORY_NAME as string, BUILD_REPOSITORY_PROVIDER as string), Agent as (AGENT_BUILDDIRECTORY as string, AGENT_HOMEDIRECTORY as string, AGENT_ID as string, AGENT_JOBNAME as string, AGENT_JOBSTATUS as string, AGENT_MACHINENAME as string, AGENT_NAME as string, AGENT_OS as string, AGENT_OSARCHITECTURE as string, AGENT_TOOLSDIRECTORY as string, AGENT_WORKFOLDER as string), System as (PIPELINE_WORKSPACE as string, SYSTEM_COLLECTIONID as string, SYSTEM_DEFAULTWORKINGDIRECTORY as string, SYSTEM_DEFINITIONID as string, SYSTEM_HOSTTYPE as string, SYSTEM_PULLREQUEST_ISFORK as string, SYSTEM_PULLREQUEST_PULLREQUESTID as string, SYSTEM_PULLREQUEST_PULLREQUESTNUMBER as string, SYSTEM_PULLREQUEST_SOURCEBRANCH as string, SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI as string, SYSTEM_PULLREQUEST_TARGETBRANCH as string, SYSTEM_TASKDEFINITIONSURI as string, SYSTEM_TASKDISPLAYNAME as string, SYSTEM_TASKINSTANCEID as string, SYSTEM_TASKINSTANCENAME as string, SYSTEM_TEAMFOUNDATIONCOLLECTIONURI as string, SYSTEM_TEAMPROJECT as string, SYSTEM_TEAMPROJECTID as string, TASK_DISPLAYNAME as string))),\n\t\tEso as string[],\n\t\tServices as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tTemplates as (Name as string, Version as string, InUse as boolean, collectionSource as string)[],\n\t\tMRDR as string[],\n\t\tUnsupportedFiles as string[],\n\t\tErrors as (CRITICAL as (Source as string, Time as string, Message as string)[], ERROR as string[], WARNING as (Source as string, Time as string, Message as string)[]),\n\t\tFilteredData as string[],\n\t\tDataSource as string[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source4\nsource1 foldDown(unroll(Services),\n\tmapColumn(\n\t\tAirID,\n\t\tComponentName,\n\t\tVersion,\n\t\tPlatform,\n\t\tName = Services.Name,\n\t\tVersion1 = Services.Version,\n\t\tInUse = Services.InUse,\n\t\tcollectionSource = Services.collectionSource\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Services\nsource2 foldDown(unroll(Templates),\n\tmapColumn(\n\t\tName = Templates.Name,\n\t\tVersion = Templates.Version,\n\t\tInUse = Templates.InUse,\n\t\tcollectionSource = Templates.collectionSource,\n\t\tAirID,\n\t\tComponentName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Template\nsource3 foldDown(unroll(Errors.CRITICAL),\n\tmapColumn(\n\t\tSource = Errors.CRITICAL.Source,\n\t\tTime = Errors.CRITICAL.Time,\n\t\tMessage = Errors.CRITICAL.Message,\n\t\tAirID,\n\t\tComponentName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ErrorCritical\nsource4 foldDown(unroll(Errors.WARNING),\n\tmapColumn(\n\t\tSource = Errors.WARNING.Source,\n\t\tTime = Errors.WARNING.Time,\n\t\tMessage = Errors.WARNING.Message,\n\t\tAirID,\n\t\tComponentName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ErrorsWarning\nServices sink(input(\n\t\tcollectionSource as string,\n\t\tcustom as (Endpoints as string[], {InUse[Yes/No]} as boolean, Name as string),\n\t\tmeta as (requires as (jsonparse as string, through as string), dev as boolean),\n\t\tname as string,\n\t\tsource as string,\n\t\tsourceType as string,\n\t\ttype as string,\n\t\tversion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopsservices.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nTemplate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopstemplate.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2\nErrorCritical sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopserrorcritical.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink3\nErrorsWarning sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['devopserrorswarning.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink4"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fordataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connstrinput",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sqloutputconn",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tcstr as string\n}\nsource(output(\n\t\tid as long,\n\t\tconnstr as string,\n\t\tinserttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nDerivedColumn1 select(mapColumn(\n\t\tconnstr = tmpconstr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsource1 derive(tmpconstr = $cstr) ~> DerivedColumn1\nSelect1 sink(input(\n\t\tid as long,\n\t\tconnstr as string,\n\t\tinserttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcentralblobtoADX')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "iotcentralblob",
								"type": "DatasetReference"
							},
							"name": "iotcentralblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Jsonoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tEnqueuedTimeUtc as string,\n\t\tProperties as ({} as string),\n\t\tSystemProperties as (connectionDeviceId as string, connectionAuthMethod as string, connectionDeviceGenerationId as string, contentType as string, interfaceName as string, enqueuedTime as string),\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['3a11d300-d923-4a3d-9cd9-75364b23f710/telemetry/*/*/*/*/*']) ~> iotcentralblob\niotcentralblob derive(BodyString = fromBase64(Body)) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tBodyString\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/multiplejointest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "populationfact",
								"type": "DatasetReference"
							},
							"name": "factpopulation"
						},
						{
							"dataset": {
								"referenceName": "State",
								"type": "DatasetReference"
							},
							"name": "state"
						},
						{
							"dataset": {
								"referenceName": "countyname",
								"type": "DatasetReference"
							},
							"name": "countyname"
						},
						{
							"dataset": {
								"referenceName": "racejoin",
								"type": "DatasetReference"
							},
							"name": "Race"
						},
						{
							"dataset": {
								"referenceName": "sex",
								"type": "DatasetReference"
							},
							"name": "sex"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "accpopstore",
								"type": "DatasetReference"
							},
							"name": "OutputPop"
						}
					],
					"transformations": [
						{
							"name": "StateJoin"
						},
						{
							"name": "CountyJoin"
						},
						{
							"name": "RaceJoin"
						},
						{
							"name": "SexJoin"
						}
					],
					"script": "source(output(\n\t\tdecennialTime as string,\n\t\tstateName as string,\n\t\tcountyName as string,\n\t\tpopulation as integer,\n\t\trace as string,\n\t\tsex as string,\n\t\tminAge as integer,\n\t\tmaxAge as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> factpopulation\nsource(output(\n\t\tStateName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> state\nsource(output(\n\t\tCountyName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> countyname\nsource(output(\n\t\tRace as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Race\nsource(output(\n\t\tSex as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> sex\nfactpopulation, state join(factpopulation@stateName == state@StateName,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> StateJoin\nStateJoin, countyname join(factpopulation@countyName == countyname@CountyName,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> CountyJoin\nCountyJoin, Race join(factpopulation@race == Race@Race,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> RaceJoin\nRaceJoin, sex join(factpopulation@sex == sex@Sex,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> SexJoin\nSexJoin sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tmapColumn(\n\t\tdecennialTime,\n\t\tstateName = factpopulation@stateName,\n\t\tcountyName = factpopulation@countyName,\n\t\tpopulation,\n\t\trace = factpopulation@race,\n\t\tsex = factpopulation@sex,\n\t\tminAge,\n\t\tmaxAge,\n\t\tstStateName = state@StateName,\n\t\tctCountyName = countyname@CountyName,\n\t\trRace = Race@Race,\n\t\tsSex = sex@Sex\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OutputPop"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetconcurency')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Parquet1incoming",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "accdeltaoutput",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tparam1 as string (\"3\")\n}\nsource(output(\n\t\tasset as string,\n\t\tasset_tag as string,\n\t\tassigned as string,\n\t\tassigned_to as string,\n\t\tassignment_group as string,\n\t\tattributes as string,\n\t\tcan_print as string,\n\t\tcategory as string,\n\t\tcd_rom as string,\n\t\tcd_speed as string,\n\t\tchange_control as string,\n\t\tchassis_type as string,\n\t\tchecked_in as string,\n\t\tchecked_out as string,\n\t\tclassification as string,\n\t\tcomments as string,\n\t\tcompany as string,\n\t\tcorrelation_id as string,\n\t\tcost as string,\n\t\tcost_cc as string,\n\t\tcost_center as string,\n\t\tcpu_core_count as string,\n\t\tcpu_core_thread as string,\n\t\tcpu_count as string,\n\t\tcpu_manufacturer as string,\n\t\tcpu_name as string,\n\t\tcpu_speed as string,\n\t\tcpu_type as string,\n\t\tdefault_gateway as string,\n\t\tdelivery_date as string,\n\t\tdepartment as string,\n\t\tdiscovery_source as string,\n\t\tdisk_space as string,\n\t\tdns_domain as string,\n\t\tdr_backup as string,\n\t\tdue as string,\n\t\tdue_in as string,\n\t\tfault_count as string,\n\t\tfirewall_status as string,\n\t\tfirst_discovered as string,\n\t\tfloppy as string,\n\t\tform_factor as string,\n\t\tfqdn as string,\n\t\tgl_account as string,\n\t\thardware_status as string,\n\t\thardware_substatus as string,\n\t\thost_name as string,\n\t\tinstall_date as string,\n\t\tinstall_status as string,\n\t\tinvoice_number as string,\n\t\tip_address as string,\n\t\tjustification as string,\n\t\tlast_discovered as string,\n\t\tlease_id as string,\n\t\tlocation as string,\n\t\tmac_address as string,\n\t\tmaintenance_schedule as string,\n\t\tmanaged_domain as string,\n\t\tmanufacturer as string,\n\t\tmodel_id as string,\n\t\tmodel_number as string,\n\t\tname as string,\n\t\tobject_id as string,\n\t\toperational_status as string,\n\t\torder_date as string,\n\t\tos as string,\n\t\tos_address_width as string,\n\t\tos_domain as string,\n\t\tos_service_pack as string,\n\t\tos_version as string,\n\t\towned_by as string,\n\t\tpo_number as string,\n\t\tprocessor_name as string,\n\t\tpurchase_date as string,\n\t\tram as string,\n\t\tschedule as string,\n\t\tserial_number as string,\n\t\tshort_description as string,\n\t\tskip_sync as string,\n\t\tstart_date as string,\n\t\tsubcategory as string,\n\t\tsupport_group as string,\n\t\tsupported_by as string,\n\t\tsys_class_name as string,\n\t\tsys_class_path as string,\n\t\tsys_created_by as string,\n\t\tsys_created_on as string,\n\t\tsys_domain as string,\n\t\tsys_domain_path as string,\n\t\tsys_id as string,\n\t\tsys_mod_count as string,\n\t\tsys_updated_by as string,\n\t\tsys_updated_on as string,\n\t\tu_additional_attributes as string,\n\t\tu_application_id as string,\n\t\tu_asset_id as string,\n\t\tu_asset_owner as string,\n\t\tu_business_approver_groups as string,\n\t\tu_business_approvers as string,\n\t\tu_cab_approver_groups as string,\n\t\tu_cab_approvers as string,\n\t\tu_category as string,\n\t\tu_ci_manager as string,\n\t\tu_corporate_structure as string,\n\t\tu_corporatestructure1 as string,\n\t\tu_delivery_date as string,\n\t\tu_device_type as string,\n\t\tu_hardware_operating_system as string,\n\t\tu_hardware_os_version as string,\n\t\tu_managed_by_group as string,\n\t\tu_rack as string,\n\t\tu_refresh_due_date as string,\n\t\tu_room as string,\n\t\tu_site_support_team as string,\n\t\tu_start_tool_last_modified_by as string,\n\t\tu_start_tool_last_modified_date as string,\n\t\tu_support_model as string,\n\t\tu_support_model_management as string,\n\t\tu_technical_approver_groups as string,\n\t\tu_technical_approvers as string,\n\t\tunverified as string,\n\t\tused_for as string,\n\t\tvendor as string,\n\t\tvirtual as string,\n\t\twarranty_expiration as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nsource1 select(mapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 alterRow(updateIf(equals(sys_id,$param1))) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tasset as string,\n\t\tasset_tag as string,\n\t\tassigned as string,\n\t\tassigned_to as string,\n\t\tassignment_group as string,\n\t\tattributes as string,\n\t\tcan_print as string,\n\t\tcategory as string,\n\t\tcd_rom as string,\n\t\tcd_speed as string,\n\t\tchange_control as string,\n\t\tchassis_type as string,\n\t\tchecked_in as string,\n\t\tchecked_out as string,\n\t\tclassification as string,\n\t\tcomments as string,\n\t\tcompany as string,\n\t\tcorrelation_id as string,\n\t\tcost as string,\n\t\tcost_cc as string,\n\t\tcost_center as string,\n\t\tcpu_core_count as string,\n\t\tcpu_core_thread as string,\n\t\tcpu_count as string,\n\t\tcpu_manufacturer as string,\n\t\tcpu_name as string,\n\t\tcpu_speed as string,\n\t\tcpu_type as string,\n\t\tdefault_gateway as string,\n\t\tdelivery_date as string,\n\t\tdepartment as string,\n\t\tdiscovery_source as string,\n\t\tdisk_space as string,\n\t\tdns_domain as string,\n\t\tdr_backup as string,\n\t\tdue as string,\n\t\tdue_in as string,\n\t\tfault_count as string,\n\t\tfirewall_status as string,\n\t\tfirst_discovered as string,\n\t\tfloppy as string,\n\t\tform_factor as string,\n\t\tfqdn as string,\n\t\tgl_account as string,\n\t\thardware_status as string,\n\t\thardware_substatus as string,\n\t\thost_name as string,\n\t\tinstall_date as string,\n\t\tinstall_status as string,\n\t\tinvoice_number as string,\n\t\tip_address as string,\n\t\tjustification as string,\n\t\tlast_discovered as string,\n\t\tlease_id as string,\n\t\tlocation as string,\n\t\tmac_address as string,\n\t\tmaintenance_schedule as string,\n\t\tmanaged_domain as string,\n\t\tmanufacturer as string,\n\t\tmodel_id as string,\n\t\tmodel_number as string,\n\t\tname as string,\n\t\tobject_id as string,\n\t\toperational_status as string,\n\t\torder_date as string,\n\t\tos as string,\n\t\tos_address_width as string,\n\t\tos_domain as string,\n\t\tos_service_pack as string,\n\t\tos_version as string,\n\t\towned_by as string,\n\t\tpo_number as string,\n\t\tprocessor_name as string,\n\t\tpurchase_date as string,\n\t\tram as string,\n\t\tschedule as string,\n\t\tserial_number as string,\n\t\tshort_description as string,\n\t\tskip_sync as string,\n\t\tstart_date as string,\n\t\tsubcategory as string,\n\t\tsupport_group as string,\n\t\tsupported_by as string,\n\t\tsys_class_name as string,\n\t\tsys_class_path as string,\n\t\tsys_created_by as string,\n\t\tsys_created_on as string,\n\t\tsys_domain as string,\n\t\tsys_domain_path as string,\n\t\tsys_id as string,\n\t\tsys_mod_count as string,\n\t\tsys_updated_by as string,\n\t\tsys_updated_on as string,\n\t\tu_additional_attributes as string,\n\t\tu_application_id as string,\n\t\tu_asset_id as string,\n\t\tu_asset_owner as string,\n\t\tu_business_approver_groups as string,\n\t\tu_business_approvers as string,\n\t\tu_cab_approver_groups as string,\n\t\tu_cab_approvers as string,\n\t\tu_category as string,\n\t\tu_ci_manager as string,\n\t\tu_corporate_structure as string,\n\t\tu_corporatestructure1 as string,\n\t\tu_delivery_date as string,\n\t\tu_device_type as string,\n\t\tu_hardware_operating_system as string,\n\t\tu_hardware_os_version as string,\n\t\tu_managed_by_group as string,\n\t\tu_rack as string,\n\t\tu_refresh_due_date as string,\n\t\tu_room as string,\n\t\tu_site_support_team as string,\n\t\tu_start_tool_last_modified_by as string,\n\t\tu_start_tool_last_modified_date as string,\n\t\tu_support_model as string,\n\t\tu_support_model_management as string,\n\t\tu_technical_approver_groups as string,\n\t\tu_technical_approvers as string,\n\t\tunverified as string,\n\t\tused_for as string,\n\t\tvendor as string,\n\t\tvirtual as string,\n\t\twarranty_expiration as string\n\t),\n\tformat: 'delta',\n\tcontainer: 'parquetoutput',\n\ttruncate: false,\n\tmergeSchema: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['sys_id'],\n\tmapColumn(\n\t\tsys_id,\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForEachTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select connstr from tblconnstr;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connstrinput",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('Lookup1').output)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "adfinput",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "adfoutput",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "connstr",
										"value": {
											"value": "@string(item().value)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "dataflow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "fordataflow",
											"type": "DataFlowReference",
											"parameters": {
												"cstr": {
													"value": "'@{variables('connstr')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime1",
											"type": "IntegrationRuntimeReference"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"connstr": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fordataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MultipleJoinTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactPopulationJoin",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "multiplejointest",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"factpopulation": {},
									"state": {},
									"countyname": {},
									"Race": {},
									"sex": {},
									"OutputPop": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/multiplejointest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/concurrencytest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parquetconcurency",
								"type": "DataFlowReference",
								"parameters": {
									"param1": {
										"value": "'@{3}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "parquetconcurency",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parquetconcurency",
								"type": "DataFlowReference",
								"parameters": {
									"param1": "\"3\""
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/parquetconcurency')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/covidcp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "covidcpflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "covidcpflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/covidcpflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/iotcentralblobtoadx')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "iotcentralblobtoADX",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"iotcentralblob": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/iotcentralblobtoADX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/devopsdatapipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "devopsJsonDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "devopsJsonDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"inputJSON": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "devopsenv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "devopsJsonDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "devopsenv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "dependenciesmeta",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "devopsenv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dependenciesmeta",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dependenciesmeta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ForEachTest",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/devopsJsonDF')]",
				"[concat(variables('factoryId'), '/dataflows/devopsenv')]",
				"[concat(variables('factoryId'), '/dataflows/dependenciesmeta')]",
				"[concat(variables('factoryId'), '/pipelines/ForEachTest')]"
			]
		}
	]
}